// JavaScript Document
var COLS = 90, ROWS = 16, startX = 4, startY = 4, w=8, s=9, mycolor = "PaleGoldenRod";
var PIXS = COLS * ROWS, DELAY = 20, COLOR_ARRAY;
var CHAR_SPACING=2, MSG_SPACING=64;
var pixels, msgArray, timerId, output, screen, bgcolor = mycolor, fgcolor = "red";
var msg = "WELCOME TO TOPAZ DIGITAL SOLUTIONS!!";
var msg_pos=0, char_cols, char_row=0, char_col=0, test_count=0;

function drawMatrix() {
var myCanvas = document.getElementById('canvas');
pixels = new Array(PIXS);
msgArray = new Array(PIXS);
// COLOR_ARRAY = new Array(20);
COLOR_ARRAY = ["red", "orange", "darkred", "darksalmon","coral", "crimson", "maroon", "magenta","darkmagenta", "indianred","darkgoldenrod", "salmon","sienna", "tomato", "orangered", "gold", "brown", "chocolate"];
COLOR_ARRAY2 = ["forestgreen", "cornflowerblue", "dodgerblue", "lime", "limegreen", "linen", "mediumblue", "turquoise","teal", "palegreen","steelblue", "springgreen","skyblue", "silver", "seagreen", "midnightblue", "royalblue", "indigo"];
output = document.getElementById("output");
screen = document.getElementById("screen");
canvas = myCanvas.getContext('2d');

for (var col = 0; col < COLS; col++){ 
for (var row = 0; row < ROWS; row++){ 
var el = new Array(3);
el[0] = row;
el[1] = col;
el[2] = "red";
pixels[col * ROWS + row] = el;
canvas.fillStyle = mycolor;
canvas.fillRect(col * s + startY, row * s + startX, w, w);
}
}
// canvas.clearRect(52 * 10 + startY, 8 * 10 + startX, 8, 8);
output.innerHTML = "<h3>Debug output appears here</h3>";
screen.innerHTML = "<h3>Debug screen appears here</h3>";
drawPixel(155);
for(var i=0; i<PIXS; i++) msgArray[i] = 0;
addSpace2MsgEnd();
timerId = setInterval("scroller()", DELAY);
}
window.addEventListener("load", drawMatrix, false);


function drawPixel(pos){
var p = new Array(3);
var myCanvas = document.getElementById('canvas');
canvas = myCanvas.getContext('2d');
p = pixels[pos];
var row = p[0];
var col = p[1];
var color = p[2];
// alert(" out of "+pixels.length);
// canvas.clearRect(col * 10 + startY, row * 10 + startX, 8, 8);
canvas.fillStyle = color;
canvas.fillRect(col * s + startY, row * s + startX, w, w);
// alert("row="+row+"; col="+col+"; out of "+pixels.length);
}

function scroller(){
char_row = msg.charCodeAt(msg_pos)-32;
char_cols = font16[char_row][0]; 
if(char_col < char_cols)
shiftLeftDisplay(char_row, char_col);
else 
shiftLeftDisplay(0, 0); 
char_col++;
if(char_col >= char_cols+CHAR_SPACING) {
char_col = 0; 
msg_pos++;
if(msg_pos >= msg.length){
msg_pos = 0;
char_col = 0;
var m = Math.round(Math.random()*1000);
var n = m % COLOR_ARRAY.length;
var p = m%2;
output.innerHTML = "<h3>Debug Output p = "+p + "</h3>";
fgcolor = (p)? COLOR_ARRAY[n] : COLOR_ARRAY2[n];
m = Math.round(Math.random()*1000);
n = m % COLOR_ARRAY.length;
bgcolor = (!p)? COLOR_ARRAY[n] : COLOR_ARRAY2[n];
for(var l=0; l<MSG_SPACING; l++)
shiftLeftDisplay(0, 1);
// clearMatrix();
}
}
}

function shiftLeftDisplay(char_row, char_col){
//shift left
var col_pixels = getColumnData(char_row, char_col);
for (var i=0; i<PIXS; i++){
var orig = PIXS-ROWS; 
if(i < orig) {
msgArray[i] = msgArray[i+ROWS];
// = temp; 
}else{ 
var byte = col_pixels >> (i%16); 
var sum = byte & 1;
if (sum == 1) {
msgArray[i] = 1;
}else
msgArray[i] = 0;
}
} //end of shift left 
//display here and delay
for(var col=0; col<COLS; col++){
for(var row=0; row<ROWS; row++){ 
var el = new Array(3); 
el[0] = row;
el[1] = col;
var pos = col * ROWS + row;
var temp1 = msgArray[pos];
// if(pos>1500) testOut("pos = "+pos+"; temp1 ="+ temp1);

if(temp1 == 0){ 
el[2] = bgcolor;
}else{
el[2] = fgcolor;
}
pixels[pos] = el;
drawPixel(pos);
}
}//end of display
}

function getFont16(character, column){
return font16[character][column];
}

function getColumnData(character, index) {
var s = 0, t = 0;
t = getFont16(character, (index * 2 + 1)); //0>1, 1>3, 2>5
s = getFont16(character, (index * 2 + 2)); //0>2, 1>4, 2>6
s = s << 8;
var columnData = t | s; 
testOut("columndata = "+columnData);
return columnData << 1;
}


function clearMatrix() {
for (var col = 0; col < COLS; col++){ 
for (var row = 0; row < ROWS; row++){ 
canvas.fillStyle = mycolor;
canvas.fillRect(col * s + startY, row * s + startX, w, w);
}
}
// canvas.clearRect(52 * 10 + startY, 8 * 10 + startX, 8, 8);
}

function testPixel(pos, color){
var myCanvas = document.getElementById('canvas');
canvas = myCanvas.getContext('2d');
// alert(" out of "+pixels.length);
// canvas.clearRect(col * 10 + startY, row * 10 + startX, 8, 8);
var row = pos%ROWS;
var col = pos/ROWS;
canvas.fillStyle = color;
canvas.fillRect(col * s + startY, row * s + startX, w, w);
// alert("row="+row+"; col="+col+"; out of "+pixels.length);
}

function testDisp(){ 
testPixel(test_count, "green");
test_count++;
if(test_count>=pixels.length) test_count = 0; 
output.innerHTML = "msgArray i+rows = "+test_count;
}

function testOut(txt){ 
screen.innerHTML = "<h3>screen = "+txt+"</h3>";
}

function doFirst() {
var myCanvas = document.getElementById('canvas');
canvas = myCanvas.getContext('2d');
canvas.fillStyle = "green";
canvas.strokeStyle = "red";
canvas.strokeRect(10, 10, 100, 200);
canvas.fillRect(20, 20, 80, 180);
canvas.clearRect(30, 30, 60, 160);
}

function addSpace2MsgEnd() {
var j = msg.length, sp=0; 
while(msg.charAt(j-1) == ' '){
sp++;
j--;
}

var cs = font16[0][0];
var sz = cs * sp;
var add = (COLS/cs) - sz;
for(var i = 0; i < add; i++) msg += ' ';
}


var font16size = [
0x06, 0x03, 0x06, 0x0C, 0x09, 0x0E, 0x0C, 0x03, 0x06, 0x06, 0x09, 0x0B, 0x04, 0x06, 0x03, 0x08,
0x09, 0x08, 0x09, 0x09, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04, 0x05, 0x0B, 0x0B, 0x0B, 0x08,
0x0E, 0x0B, 0x0A, 0x0A, 0x0B, 0x09, 0x08, 0x0B, 0x0B, 0x06, 0x07, 0x0A, 0x08, 0x0D, 0x0B, 0x0B,
0x0A, 0x0B, 0x0B, 0x09, 0x0A, 0x0B, 0x0A, 0x0F, 0x0A, 0x0A, 0x09, 0x06, 0x08, 0x06, 0x0B, 0x0A,
0x05, 0x09, 0x09, 0x07, 0x09, 0x09, 0x06, 0x09, 0x09, 0x03, 0x05, 0x09, 0x03, 0x0E, 0x09, 0x09,
0x09, 0x09, 0x06, 0x07, 0x06, 0x09, 0x08, 0x0D, 0x09, 0x08, 0x08, 0x09, 0x06, 0x09, 0x0C, 0x05
];

var font16 = [
[0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // Code for char
[0x03, 0x00, 0x00, 0xFE, 0x1B, 0xFE, 0x1B], // Code for char !
[0x06, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00], // Code for char \"
[0x0C, 0x00, 0x03, 0x30, 0x1B, 0xB0, 0x07, 0x78, 0x03, 0x36, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x1B, 0xB0, 0x07, 0x78, 0x03, 0x36, 0x03, 0x30, 0x00], // Code for char #
[0x09, 0x70, 0x0C, 0xF8, 0x1C, 0x8C, 0x10, 0x84, 0x10, 0xFF, 0x7F, 0x84, 0x10, 0x84, 0x18, 0x9C, 0x0F, 0x18, 0x07], // Code for char $
[0x0E, 0xFC, 0x00, 0xFE, 0x01, 0x02, 0x01, 0x02, 0x11, 0xFC, 0x0C, 0x00, 0x02, 0x80, 0x01, 0x60, 0x00, 0x10, 0x00, 0xCC, 0x0F, 0xE2, 0x1F, 0x20, 0x10, 0x20, 0x10, 0xC0, 0x0F], // Code for char %
[0x0C, 0x00, 0x00, 0x00, 0x07, 0x9C, 0x0F, 0xFE, 0x18, 0x62, 0x10, 0xC2, 0x10, 0xE2, 0x11, 0x3E, 0x1B, 0x1C, 0x0E, 0xC0, 0x0F, 0xC0, 0x19, 0x00, 0x10], // Code for char &
[0x03, 0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00], // Code for char '
[0x06, 0x00, 0x00, 0xF0, 0x0F, 0xFC, 0x3F, 0x0E, 0x70, 0x03, 0xC0, 0x01, 0x80], // Code for char (
[0x06, 0x00, 0x00, 0x01, 0x80, 0x03, 0xC0, 0x0E, 0x70, 0xFC, 0x3F, 0xF0, 0x0F], // Code for char )
[0x09, 0x00, 0x00, 0x42, 0x00, 0x24, 0x00, 0x18, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x18, 0x00, 0x24, 0x00, 0x42, 0x00], // Code for char *
[0x0B, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xF8, 0x0F, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00], // Code for char +
[0x04, 0x00, 0xC0, 0x00, 0xFC, 0x00, 0x3C, 0x00, 0x04], // Code for char ,
[0x06, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00], // Code for char -
[0x03, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x1C], // Code for char .\n" +
[0x08, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x0E, 0x80, 0x01, 0x70, 0x00, 0x0C, 0x00, 0x00, 0x00], // Code for char /
[0x09, 0xF8, 0x07, 0xFC, 0x0F, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0xFC, 0x0F, 0xF8, 0x07], // Code for char 0
[0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x10, 0x00, 0x10], // Code for char 1
[0x09, 0x0C, 0x10, 0x0E, 0x18, 0x02, 0x1C, 0x02, 0x16, 0x02, 0x13, 0x82, 0x11, 0xC6, 0x10, 0x7C, 0x10, 0x38, 0x10], // Code for char 2
[0x09, 0x0C, 0x0C, 0x0E, 0x1C, 0x02, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0xE6, 0x18, 0xBC, 0x0F, 0x18, 0x07], // Code for char 3
[0x0A, 0x80, 0x01, 0x40, 0x01, 0x20, 0x01, 0x10, 0x01, 0x08, 0x01, 0x04, 0x01, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x01, 0x00, 0x01], // Code for char 4
[0x09, 0x00, 0x0C, 0x3E, 0x1C, 0x3E, 0x10, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x62, 0x18, 0xC2, 0x0F, 0x82, 0x07], // Code for char 5
[0x09, 0xF0, 0x07, 0xF8, 0x0F, 0x2C, 0x18, 0x26, 0x10, 0x22, 0x10, 0x22, 0x10, 0x62, 0x18, 0xC2, 0x0F, 0x80, 0x07], // Code for char 6
[0x09, 0x02, 0x00, 0x02, 0x00, 0x02, 0x18, 0x02, 0x1E, 0x82, 0x07, 0xE2, 0x01, 0x7A, 0x00, 0x1E, 0x00, 0x06, 0x00], // Code for char 7
[0x09, 0x18, 0x07, 0xBC, 0x0F, 0xE6, 0x18, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0xE6, 0x18, 0xBC, 0x0F, 0x18, 0x07], // Code for char 8
[0x09, 0x78, 0x00, 0xFC, 0x10, 0x86, 0x11, 0x02, 0x11, 0x02, 0x11, 0x02, 0x19, 0x06, 0x0D, 0xFC, 0x07, 0xF8, 0x03], // Code for char 9
[0x04, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0x70, 0x1C], // Code for char :
[0x05, 0x00, 0x00, 0x00, 0xC0, 0x70, 0xFC, 0x70, 0x3C, 0x00, 0x04], // Code for char ;
[0x0B, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x40, 0x02, 0x40, 0x02, 0x20, 0x04, 0x20, 0x04, 0x10, 0x08, 0x10, 0x08, 0x08, 0x10, 0x08, 0x10], // Code for char <
[0x0B, 0x00, 0x00, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02], // Code for char =
[0x0B, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x10, 0x08, 0x10, 0x08, 0x20, 0x04, 0x20, 0x04, 0x40, 0x02, 0x40, 0x02, 0x80, 0x01, 0x80, 0x01], // Code for char >
[0x08, 0x0C, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x02, 0x1B, 0x82, 0x1B, 0xC6, 0x00, 0x7C, 0x00, 0x38, 0x00], // Code for char ?
[0x0E, 0xE0, 0x07, 0x10, 0x08, 0x08, 0x10, 0xC4, 0x23, 0xE2, 0x47, 0x32, 0x4C, 0x12, 0x48, 0x12, 0x48, 0xF2, 0x47, 0xF2, 0x4F, 0x04, 0x08, 0x08, 0x08, 0x10, 0x04, 0xE0, 0x03, 0x00, 0x00], // Code for char @
[0x0B, 0x00, 0x1C, 0x00, 0x1F, 0xE0, 0x03, 0xF8, 0x01, 0x1E, 0x01, 0x06, 0x01, 0x1E, 0x01, 0xF8, 0x01, 0xE0, 0x03, 0x00, 0x1F, 0x00, 0x1C], // Code for char A
[0x0A, 0xFE, 0x1F, 0xFE, 0x1F, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x66, 0x10, 0xFC, 0x18, 0x98, 0x0F, 0x00, 0x07], // Code for char B
[0x0A, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x0E, 0x1C, 0x0C, 0x0C], // Code for char C
[0x0B, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0x04, 0x08, 0x1C, 0x0E, 0xF8, 0x07, 0xE0, 0x01], // Code for char D
[0x09, 0xFE, 0x1F, 0xFE, 0x1F, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10], // Code for char E
[0x08, 0xFE, 0x1F, 0xFE, 0x1F, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00], // Code for char F
[0x0B, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x8E, 0x1F, 0x8C, 0x0F], // Code for char G
[0x0B, 0xFE, 0x1F, 0xFE, 0x1F, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xFE, 0x1F, 0xFE, 0x1F], // Code for char H
[0x06, 0x02, 0x10, 0x02, 0x10, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x10, 0x02, 0x10], // Code for char I
[0x07, 0x00, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x18, 0xFE, 0x0F, 0xFE, 0x07], // Code for char J
[0x0A, 0xFE, 0x1F, 0xFE, 0x1F, 0x40, 0x00, 0xE0, 0x00, 0xB0, 0x01, 0x18, 0x03, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x18, 0x00, 0x10], // Code for char K
[0x08, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10], // Code for char L
[0x0D, 0xFE, 0x1F, 0x0E, 0x00, 0x3C, 0x00, 0xF0, 0x00, 0xC0, 0x01, 0x00, 0x07, 0x00, 0x06, 0x00, 0x01, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0xFE, 0x1F, 0xFE, 0x1F], // Code for char M
[0x0B, 0xFE, 0x1F, 0x0E, 0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x07, 0x00, 0x0E, 0xFE, 0x1F], // Code for char N
[0x0B, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0x0C, 0x0C, 0xFC, 0x0F, 0xF0, 0x03], // Code for char O
[0x0A, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x86, 0x01, 0xFC, 0x00, 0x78, 0x00], // Code for char P
[0x0B, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x30, 0x02, 0x70, 0x06, 0xD8, 0x0C, 0x8C, 0xFC, 0x8F, 0xF0, 0x83], // Code for char Q
[0x0B, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x86, 0x03, 0xFC, 0x06, 0x78, 0x0C, 0x00, 0x18, 0x00, 0x10], // Code for char R
[0x09, 0x38, 0x0C, 0x7C, 0x1C, 0xE6, 0x10, 0xC2, 0x10, 0xC2, 0x10, 0xC2, 0x10, 0xC2, 0x19, 0x8E, 0x0F, 0x0C, 0x07], // Code for char
[0x0A, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00], // Code for char T
[0x0B, 0xFE, 0x07, 0xFE, 0x0F, 0x00, 0x18, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x18, 0xFE, 0x0F, 0xFE, 0x07], // Code for char U
[0x0A, 0x0E, 0x00, 0x7E, 0x00, 0xF0, 0x03, 0x80, 0x1F, 0x00, 0x1C, 0x00, 0x1C, 0x80, 0x1F, 0xF0, 0x03, 0x7E, 0x00, 0x0E, 0x00], // Code for char V
[0x0F, 0x1E, 0x00, 0xFE, 0x03, 0xE0, 0x1F, 0x00, 0x1C, 0x00, 0x1F, 0xE0, 0x07, 0xFC, 0x00, 0x3E, 0x00, 0xFC, 0x00, 0xE0, 0x07, 0x00, 0x1F, 0x00, 0x1C, 0xE0, 0x1F, 0xFE, 0x03, 0x1E, 0x00], // Code for char W
[0x0A, 0x06, 0x18, 0x0E, 0x1C, 0x18, 0x06, 0x30, 0x03, 0xE0, 0x01, 0xE0, 0x01, 0x30, 0x03, 0x18, 0x06, 0x0E, 0x1C, 0x06, 0x18], // Code for char X
[0x0A, 0x06, 0x00, 0x1E, 0x00, 0x38, 0x00, 0xE0, 0x00, 0xC0, 0x1F, 0xC0, 0x1F, 0xE0, 0x00, 0x38, 0x00, 0x1E, 0x00, 0x06, 0x00], // Code for char Y
[0x09, 0x02, 0x18, 0x02, 0x1C, 0x02, 0x17, 0x82, 0x13, 0xC2, 0x10, 0x72, 0x10, 0x3A, 0x10, 0x0E, 0x10, 0x06, 0x10], // Code for char Z
[0x06, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80], // Code for char [
[0x08, 0x00, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x70, 0x00, 0x80, 0x01, 0x00, 0x0E, 0x00, 0x30, 0x00, 0xC0], // Code for char BackSlash
[0x06, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 0xFF], // Code for char ]
[0x0B, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x18, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x18, 0x00, 0x20, 0x00, 0x40, 0x00], // Code for char ^
[0x0A, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40], // Code for char _
[0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00], // Code for char `
[0x09, 0x00, 0x0E, 0x20, 0x1F, 0x30, 0x11, 0x90, 0x10, 0x90, 0x10, 0x90, 0x10, 0xB0, 0x08, 0xE0, 0x1F, 0xC0, 0x1F], // Code for char a
[0x09, 0xFF, 0x1F, 0xFF, 0x1F, 0x20, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0xE0, 0x0F, 0xC0, 0x07], // Code for char b
[0x07, 0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x08], // Code for char c
[0x09, 0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x08, 0xFF, 0x1F, 0xFF, 0x1F], // Code for char d
[0x09, 0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x19, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x30, 0x11, 0xE0, 0x19, 0xC0, 0x09], // Code for char e
[0x06, 0x10, 0x00, 0xFE, 0x1F, 0xFF, 0x1F, 0x11, 0x00, 0x11, 0x00, 0x01, 0x00], // Code for char f
[0x09, 0xC0, 0x07, 0xE0, 0x4F, 0x30, 0xD8, 0x10, 0x90, 0x10, 0x90, 0x10, 0x90, 0x20, 0xC8, 0xF0, 0x7F, 0xF0, 0x3F], // Code for char g
[0x09, 0xFF, 0x1F, 0xFF, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x30, 0x00, 0xE0, 0x1F, 0xC0, 0x1F], // Code for char h
[0x03, 0x00, 0x00, 0xF6, 0x1F, 0xF6, 0x1F], // Code for char i
[0x05, 0x00, 0x80, 0x10, 0x80, 0x10, 0x80, 0xF6, 0xFF, 0xF6, 0x7F], // Code for char j
[0x09, 0xFF, 0x1F, 0xFF, 0x1F, 0x00, 0x01, 0x80, 0x01, 0xC0, 0x03, 0x60, 0x06, 0x30, 0x0C, 0x10, 0x18, 0x00, 0x10], // Code for char k
[0x03, 0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F], // Code for char l
[0x0E, 0xF0, 0x1F, 0xF0, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x1F, 0xE0, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x1F, 0xE0, 0x1F], // Code for char m
[0x09, 0xF0, 0x1F, 0xF0, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x30, 0x00, 0xE0, 0x1F, 0xC0, 0x1F], // Code for char n
[0x09, 0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0xE0, 0x0F, 0xC0, 0x07], // Code for char o
[0x09, 0xF0, 0xFF, 0xF0, 0xFF, 0x20, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0xE0, 0x0F, 0xC0, 0x07], // Code for char p
[0x09, 0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x08, 0xF0, 0xFF, 0xF0, 0xFF], // Code for char q
[0x06, 0xF0, 0x1F, 0xF0, 0x1F, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00], // Code for char r
[0x07, 0xE0, 0x08, 0xF0, 0x11, 0x90, 0x11, 0x90, 0x13, 0x10, 0x13, 0x10, 0x1F, 0x20, 0x0E], // Code for char s
[0x06, 0x10, 0x00, 0xFE, 0x0F, 0xFE, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10], // Code for char t
[0x09, 0xF0, 0x07, 0xF0, 0x0F, 0x00, 0x18, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0xF0, 0x1F, 0xF0, 0x1F], // Code for char u
[0x08, 0x70, 0x00, 0xF0, 0x03, 0x80, 0x0F, 0x00, 0x1C, 0x00, 0x1C, 0x80, 0x0F, 0xF0, 0x03, 0x70, 0x00], // Code for char v
[0x0D, 0x30, 0x00, 0xF0, 0x03, 0xC0, 0x1F, 0x00, 0x1C, 0x80, 0x0F, 0xE0, 0x03, 0x70, 0x00, 0xE0, 0x03, 0x80, 0x0F, 0x00, 0x1C, 0xC0, 0x1F, 0xF0, 0x03, 0x30, 0x00], // Code for char w
[0x09, 0x10, 0x10, 0x30, 0x18, 0x60, 0x0C, 0xC0, 0x07, 0x80, 0x03, 0xC0, 0x07, 0x60, 0x0C, 0x30, 0x18, 0x10, 0x10], // Code for char x
[0x08, 0x70, 0x00, 0xF0, 0x03, 0x80, 0x8F, 0x00, 0xFC, 0x00, 0x7C, 0x80, 0x0F, 0xF0, 0x03, 0x70, 0x00], // Code for char y
[0x08, 0x10, 0x18, 0x10, 0x1C, 0x10, 0x16, 0x10, 0x13, 0x90, 0x11, 0xD0, 0x10, 0x70, 0x10, 0x30, 0x10], // Code for char z
[0x09, 0x80, 0x00, 0x80, 0x00, 0xC0, 0x01, 0x7C, 0x3F, 0x3E, 0x7E, 0x03, 0xC0, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80], // Code for char [
[0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF], // Code for char |
[0x09, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x03, 0xC0, 0x3E, 0x7E, 0x7C, 0x3F, 0xC0, 0x01, 0x80, 0x00, 0x80, 0x00], // Code for char ]
[0x0C, 0x80, 0x03, 0xC0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x80, 0x01, 0xE0, 0x00], // Code for char ~
[0x05, 0xFE, 0x0F, 0xFE, 0x0F, 0x02, 0x08, 0xFE, 0x0F, 0xFE, 0x0F] // Code for char ";
];
